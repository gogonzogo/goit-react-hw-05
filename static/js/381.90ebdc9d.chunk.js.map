{"version":3,"file":"static/js/381.90ebdc9d.chunk.js","mappings":"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","sources":["components/AdditionalInfoCard/AdditionalInfoCard.module.css","components/AdditionalInfoCard/AdditionalInfoCard.jsx","components/Loader/Loader.module.css","components/Loader/Loader.jsx","config/api-config.js","utils/fetchUtils.js","hooks/useTmdbFetch.js","hooks/useTmdbData.js","pages/MovieDetails/Reviews/Reviews.module.css","pages/MovieDetails/Reviews/Reviews.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","import css from './AdditionalInfoCard.module.css';\n\nconst AdditionalInfoCard = ({\n  profilePath,\n  name,\n  character,\n  author,\n  reviewDate,\n  reviewContent,\n}) => {\n  return  (\n    <li className={css.castGalleryItem}>\n      {profilePath && (\n        <img\n          className={css.castGalleryImg}\n          src={`https://image.tmdb.org/t/p/w500${profilePath}`}\n          alt={name}\n          width=\"200px\"\n        />\n      )}\n      <p className={css.castGalleryTitle}>{name || author}</p>\n      {character && <p className={css.castGalleryText}>{character}</p>}\n      {reviewDate && <p className={css.castGalleryText}>{reviewDate}</p>}\n      {reviewContent && <p className={css.castGalleryText}>{reviewContent}</p>}\n    </li>\n  ) \n};\n\nexport default AdditionalInfoCard","// extracted by mini-css-extract-plugin\nexport default {};","import css from './Loader.module.css';\nimport { MagnifyingGlass } from 'react-loader-spinner';\n\nconst Loader = () => {\n  return (\n    <div className={css.loaderContainer}>\n      <MagnifyingGlass\n        visible={true}\n        height=\"80\"\n        width=\"80\"\n        ariaLabel=\"MagnifyingGlass-loading\"\n        wrapperStyle={{}}\n        wrapperClass=\"MagnifyingGlass-wrapper\"\n        glassColor=\"#c0efff\"\n        color=\"#e15b64\"\n      />\n    </div>\n  );\n}\n\nexport default Loader;","export const getTmdbApiEndpoint = (movieId, fetchCategory, userQuery) => {\n  const TRENDING_URL = '/trending/all/day';\n  const SEARCH_URL = `/search/movie?query=${userQuery}`;\n  const DETAILS_URL = `/movie/${movieId}`;\n  const CAST_URL = `/movie/${movieId}/credits`;\n  const REVIEWS_URL = `/movie/${movieId}/reviews`;\n\n  switch (fetchCategory) {\n    case 'trending':\n      return TRENDING_URL;\n    case 'search':\n      return SEARCH_URL;\n    case 'details':\n      return DETAILS_URL;\n    case 'cast':\n      return CAST_URL;\n    case 'reviews':\n      return REVIEWS_URL;\n    default:\n      return;\n  }\n};\n\nexport const TMDB_API_CONFIG = {\n  API_KEY: '5d8e08b77a668b368d7194faf94b14f5',\n  BASE_URL: 'https://api.themoviedb.org/3',\n  IMG_BASE_URL: 'https://image.tmdb.org/t/p/w500',\n  IMG_PLACEHOLDER_URL: 'https://placehold.jp/84848b/ffffff/200x300.jpg?text=Movie%20Poster%20Unavailable',\n};","\n\nexport const isTimeStampExpired = (timeStamp) => {\n  if (!timeStamp) {\n    return true;\n  }\n  const currentTimeStamp = getCurrentTimeStamp();\n  return timeStamp !== currentTimeStamp;\n}\n\nexport const getCurrentTimeStamp = () => {\n  const date = new Date();\n  const day = date.getDate();\n  const month = date.getMonth() + 1;\n  return `${day}-${month}`;\n}\n\nexport const urlEndPoint = (url) => {\n  const urlArr = url.split('/');\n  const endPoint = urlArr[urlArr.length - 1];\n  return endPoint;\n}","import axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport { TMDB_API_CONFIG } from 'config/api-config';\nimport {\n  getCurrentTimeStamp, isTimeStampExpired } from 'utils/fetchUtils';\n\nexport const useTmdbFetch = (url) => {\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n  const [totalResults, setTotalResults] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n  const { API_KEY, BASE_URL } = TMDB_API_CONFIG;\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!url || url === `/search/movie?query=`) {\n        setData();\n        setIsLoading(false);\n        return;\n      }\n      try {\n        setIsLoading(true);\n        const cachedData = localStorage.getItem(url);\n\n        if (cachedData) {\n          const { timeStamp, responseData } = JSON.parse(localStorage.getItem(url));\n          const isDataExpired = isTimeStampExpired(timeStamp);\n\n          if (!isDataExpired) {\n            setData(responseData);\n            setError(null);\n            setIsLoading(false);\n            return;\n          } else {\n            localStorage.clear();\n          }\n        }\n        const response = await axios(`${BASE_URL}${url}`, {\n          params: {\n            api_key: API_KEY,\n            language: 'en-US',\n            adult: false,\n          },\n        });\n        const responseData = response.data;\n        console.log(responseData)\n        if (responseData.total_results === 0) {\n          setData(null);\n          setError(true);\n          return;\n        }\n        const timeStamp = getCurrentTimeStamp();\n        localStorage.setItem(url, JSON.stringify({ timeStamp, responseData }));\n        setData(response.data);\n        setError(null);\n        setTotalResults(response.data.total_results);\n      } catch (error) {\n        setError(error)\n        setData(null);\n        console.log(`Error fetching data from ${url}: , ${error}`);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, [url, API_KEY, BASE_URL]);\n  return { data, error, isLoading, totalResults };\n};\n\nexport default useTmdbFetch;","import { useParams } from 'react-router-dom';\nimport useTmdbFetch from 'hooks/useTmdbFetch';\nimport { getTmdbApiEndpoint } from 'config/api-config';\n\nexport const useTmdbData = (option, userQuery) => {\n  const { movieId } = useParams();\n  let URL = getTmdbApiEndpoint(movieId, option, userQuery);\n  const { data, isLoading, error } = useTmdbFetch(URL, userQuery);\n\n  return { movieId, URL, data, isLoading, error };\n};\n\nexport default useTmdbData;","// extracted by mini-css-extract-plugin\nexport default {};","import css from './Reviews.module.css';\nimport useTmdbData from 'hooks/useTmdbData';\nimport AdditionalInfoCard from 'components/AdditionalInfoCard/AdditionalInfoCard';\nimport Loader from 'components/Loader/Loader';\n\nconst Reviews = () => {\n  const { data, isLoading, error } = useTmdbData('reviews');\n\n  return !error ? (\n    !isLoading ? (\n      <div className={css.reviewsDetailsContainer}>\n        <ul className={css.reviewsDetails}>\n          {data.results.map(review => (\n            <AdditionalInfoCard\n              key={review.id}\n              avatarPath={review.author_details.avatar_path}\n              author={review.author}\n              reviewData={review.created_at}\n              reviewContent={review.content}\n              isLoading={isLoading}\n            />\n          ))}\n        </ul>\n      </div>\n    ) : (\n      <Loader />\n    )\n  ) : (\n    <h5>No reviews at this time.</h5>\n  );\n};\n\nexport default Reviews;"],"names":["profilePath","name","character","author","reviewDate","reviewContent","className","css","src","alt","width","visible","height","ariaLabel","wrapperStyle","wrapperClass","glassColor","color","getTmdbApiEndpoint","movieId","fetchCategory","userQuery","SEARCH_URL","DETAILS_URL","CAST_URL","REVIEWS_URL","TMDB_API_CONFIG","API_KEY","BASE_URL","IMG_BASE_URL","IMG_PLACEHOLDER_URL","isTimeStampExpired","timeStamp","getCurrentTimeStamp","date","Date","day","getDate","month","getMonth","url","useState","data","setData","error","setError","totalResults","setTotalResults","isLoading","setIsLoading","useEffect","fetchData","localStorage","getItem","JSON","parse","responseData","clear","axios","params","api_key","language","adult","response","console","log","total_results","setItem","stringify","useTmdbData","option","useParams","URL","useTmdbFetch","Loader","results","map","review","AdditionalInfoCard","avatarPath","author_details","avatar_path","reviewData","created_at","content","id"],"sourceRoot":""}