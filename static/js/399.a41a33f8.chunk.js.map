{"version":3,"file":"static/js/399.a41a33f8.chunk.js","mappings":"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","sources":["api/api-config.js","api/fetchUtils.js","api/useTmdbFetch.js","api/useTmdbData.js","webpack://react-homework-template/./src/components/MovieCard/MovieCard.module.css?a4e5","components/MovieCard/MovieCard.jsx","webpack://react-homework-template/./src/pages/MovieDetails/MovieDetails.module.css?0c24","webpack://react-homework-template/./src/components/BackButton/BackButton.module.css?d3a5","components/BackButton/BackButton.jsx","webpack://react-homework-template/./src/components/AdditionalInfoLinks/AdditionalInfoLinks.module.css?6183","components/AdditionalInfoLinks/AdditionalInfoLinks.jsx","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["export const getTmdbApiEndpoint = (movieId, fetchCategory, userQuery) => {\n  const TRENDING_URL = '/trending/all/day';\n  const SEARCH_URL = `/search/movie?query=${userQuery}`;\n  const DETAILS_URL = `/movie/${movieId}`;\n  const CAST_URL = `/movie/${movieId}/credits`;\n  const REVIEWS_URL = `/movie/${movieId}/reviews`;\n\n  switch (fetchCategory) {\n    case 'trending':\n      return TRENDING_URL;\n    case 'search':\n      return SEARCH_URL;\n    case 'details':\n      return DETAILS_URL;\n    case 'cast':\n      return CAST_URL;\n    case 'reviews':\n      return REVIEWS_URL;\n    default:\n      return;\n  }\n};\n\nexport const TMDB_API_CONFIG = {\n  API_KEY: '5d8e08b77a668b368d7194faf94b14f5',\n  BASE_URL: 'https://api.themoviedb.org/3',\n  IMG_BASE_URL: 'https://image.tmdb.org/t/p/w500',\n  MOVIE_IMG_PLACEHOLDER_URL: 'https://placehold.jp/84848b/ffffff/200x300.jpg?text=Movie%20Poster%20Unavailable',\n  CAST_IMG_PLACEHOLDER_URL: 'https://placehold.jp/95959d/ffffff/80x120.png?text=NO%20IMAGE%20AVAILABLE',\n};","export const isTimeStampExpired = (timeStamp) => {\n  if (!timeStamp) {\n    return true;\n  }\n  const currentTimeStamp = getCurrentTimeStamp();\n  return timeStamp !== currentTimeStamp;\n}\n\nexport const getCurrentTimeStamp = () => {\n  const date = new Date();\n  const day = date.getDate();\n  const month = date.getMonth() + 1;\n  return `${day}-${month}`;\n}\n\nexport const urlEndPoint = (url) => {\n  const urlArr = url.split('/');\n  const endPoint = urlArr[urlArr.length - 1];\n  return endPoint;\n}","import axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport { TMDB_API_CONFIG } from 'api/api-config';\nimport { getCurrentTimeStamp, isTimeStampExpired } from 'api/fetchUtils';\n\nexport const useTmdbFetch = (url) => {\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n  const [totalResults, setTotalResults] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n  const { API_KEY, BASE_URL } = TMDB_API_CONFIG;\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!url || url === `/search/movie?query=`) {\n        setData();\n        setIsLoading(false);\n        return;\n      }\n      try {\n        setIsLoading(true);\n        const cachedData = localStorage.getItem(url);\n\n        if (cachedData) {\n          const { timeStamp, responseData } = JSON.parse(localStorage.getItem(url));\n          const isDataExpired = isTimeStampExpired(timeStamp);\n\n          if (!isDataExpired) {\n            setData(responseData);\n            setError(null);\n            setIsLoading(false);\n            return;\n          } else {\n            localStorage.clear();\n          }\n        }\n        const response = await axios(`${BASE_URL}${url}`, {\n          params: {\n            api_key: API_KEY,\n            language: 'en-US',\n            adult: false,\n          },\n        });\n        const responseData = response.data;\n        if (responseData.total_results === 0) {\n          setData(null);\n          setError(true);\n          return;\n        }\n        const timeStamp = getCurrentTimeStamp();\n        localStorage.setItem(url, JSON.stringify({ timeStamp, responseData }));\n        setData(response.data);\n        setError(null);\n        setTotalResults(response.data.total_results);\n      } catch (error) {\n        setError(error)\n        setData(null);\n        console.log(`Error fetching data from ${url}: , ${error}`);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, [url, API_KEY, BASE_URL]);\n  return { data, error, isLoading, totalResults };\n};\n\nexport default useTmdbFetch;","import { useParams } from 'react-router-dom';\nimport useTmdbFetch from 'api/useTmdbFetch';\nimport { getTmdbApiEndpoint } from 'api/api-config';\n\nexport const useTmdbData = (option, userQuery) => {\n  const { movieId } = useParams();\n  let URL = getTmdbApiEndpoint(movieId, option, userQuery);\n  const { data, isLoading, error } = useTmdbFetch(URL, userQuery);\n\n  return { movieId, URL, data, isLoading, error };\n};\n\nexport default useTmdbData;","// extracted by mini-css-extract-plugin\nexport default {\"movieGalleryItem\":\"MovieCard_movieGalleryItem__dnDEx\",\"movieGalleryImg\":\"MovieCard_movieGalleryImg__9rhm1\",\"movieItemDetails\":\"MovieCard_movieItemDetails__QiHqU\",\"movieGalleryDetailItem\":\"MovieCard_movieGalleryDetailItem__w2MbF\"};","import css from './MovieCard.module.css';\nimport { TMDB_API_CONFIG } from 'api/api-config';\nimport Loader from 'components/Loader/Loader';\n\nconst MovieCard = ({\n  movie,\n  releaseYear,\n  userScore,\n  overview,\n  genres,\n  isLoading,\n}) => {\n  const { IMG_BASE_URL, MOVIE_IMG_PLACEHOLDER_URL } = TMDB_API_CONFIG;\n  const MOVIE_IMG_URL = `${IMG_BASE_URL}${movie.poster_path}`;\n\n  const movieImg = movie => {\n    if (movie.poster_path) {\n      return MOVIE_IMG_URL;\n    } else {\n      return MOVIE_IMG_PLACEHOLDER_URL;\n    }\n  };\n\n  return !isLoading ? (\n    <>\n      <li className={css.movieGalleryItem}>\n        <img\n          className={css.movieGalleryImg}\n          src={movieImg(movie)}\n          alt={movie.title}\n          data-value={movie.id}\n          width=\"200px\"\n        />\n        <ul className={css.movieItemDetails}>\n          {releaseYear && (\n            <>\n              <li className={css.movieGalleryDetailItem}>\n                {movie.title || movie.original_name}\n              </li>\n              <li className={css.movieGalleryDetailItem}>\n                {releaseYear.slice(0, 4)}\n              </li>\n            </>\n          )}\n          {userScore && (\n            <li className={css.movieGalleryDetailItem}>\n              User Score: {userScore}\n            </li>\n          )}\n          {overview && (\n            <li className={css.movieGalleryDetailItem}>{overview}</li>\n          )}\n          {genres && (\n            <li className={css.movieGalleryDetailItem}>\n              Genres:{' '}\n              {genres.map(genre => (\n                <span key={genre.id}>{genre.name} </span>\n              ))}\n            </li>\n          )}\n        </ul>\n      </li>\n    </>\n  ) : (\n    <Loader />\n  );\n};\n\nexport default MovieCard;\n","// extracted by mini-css-extract-plugin\nexport default {\"movieDetailsContainer\":\"MovieDetails_movieDetailsContainer__hxmcN\",\"movieDetailsList\":\"MovieDetails_movieDetailsList__goILT\"};","// extracted by mini-css-extract-plugin\nexport default {\"backButton\":\"BackButton_backButton__SI3qJ\"};","import css from './BackButton.module.css';\nimport { Link, useLocation } from 'react-router-dom';\n\nconst BackButton = ({ onClick }) => {\n  const location = useLocation();\n\n  const getBackPath = () => {\n    let path = location.pathname;\n    let newPath;\n\n    if (path.includes('?query=')) {\n      newPath = '/movies';\n    }\n    if (path.includes('/movie')) {\n      newPath = '/';\n    }\n    return newPath;\n  };\n\n  const newPath = getBackPath();\n\n  return <Link className={css.backButton} to={newPath}>Go Back</Link>;\n};\n\nexport default BackButton;\n","// extracted by mini-css-extract-plugin\nexport default {\"additionalMovieInfo\":\"AdditionalInfoLinks_additionalMovieInfo__5r-Jb\",\"additionalMovieInfoListItem\":\"AdditionalInfoLinks_additionalMovieInfoListItem__IF9Rl\"};","import css from './AdditionalInfoLinks.module.css';\nimport { NavLink, Outlet, useParams } from 'react-router-dom';\nimport { Suspense } from 'react';\nimport Loader from 'components/Loader/Loader';\n\nconst AdditionalInfoLinks = () => {\n  const { movieId } = useParams();\n\n  return (\n    <>\n      <div className={css.additionalMovieInfo}>\n        <p className={css.additionalMovieInfoTitle}>Additional information</p>\n        <ul className={css.additionalMovieInfoList}>\n          <li className={css.additionalMovieInfoListItem}>\n            <NavLink to={`/movies/${movieId}/cast`} className={css.castLink}>\n              Cast\n            </NavLink>\n          </li>\n          <li className={css.additionalMovieInfoListItem}>\n            <NavLink\n              to={`/movies/${movieId}/reviews`}\n              className={css.reviewLink}\n            >\n              Reviews\n            </NavLink>\n          </li>\n        </ul>\n      </div>\n      <div>\n        <Suspense fallback={<Loader />}>\n          <Outlet />\n        </Suspense>\n      </div>\n    </>\n  );\n};\n\nexport default AdditionalInfoLinks;\n","import css from './MovieDetails.module.css';\nimport useTmdbData from 'api/useTmdbData';\nimport BackButton from 'components/BackButton/BackButton';\nimport MovieCard from 'components/MovieCard/MovieCard';\nimport CastAndReviewsLayout from 'components/AdditionalInfoLinks/AdditionalInfoLinks';\nimport Loader from 'components/Loader/Loader';\n\nconst MovieDetails = () => {\n  const { data, isLoading, error } = useTmdbData('details');\n  const movie = data;\n\n  return !error ? (\n    !isLoading ? (\n      <div className={css.movieDetailsContainer}>\n        <BackButton />\n        <ul className={css.movieDetailsList}>\n          <MovieCard\n            movie={movie}\n            releaseYear={movie.release_date}\n            userScore={movie.vote_average}\n            overview={movie.overview}\n            genres={movie.genres}\n          />\n        </ul>\n        <CastAndReviewsLayout />\n      </div>\n    ) : (\n      <Loader />\n    )\n  ) : (\n    <h1>Sorry, no movie details for the selected movie.</h1>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["getTmdbApiEndpoint","movieId","fetchCategory","userQuery","SEARCH_URL","DETAILS_URL","CAST_URL","REVIEWS_URL","TMDB_API_CONFIG","API_KEY","BASE_URL","IMG_BASE_URL","MOVIE_IMG_PLACEHOLDER_URL","CAST_IMG_PLACEHOLDER_URL","isTimeStampExpired","timeStamp","getCurrentTimeStamp","date","Date","day","getDate","month","getMonth","url","useState","data","setData","error","setError","totalResults","setTotalResults","isLoading","setIsLoading","useEffect","fetchData","localStorage","getItem","JSON","parse","responseData","clear","axios","params","api_key","language","adult","response","total_results","setItem","stringify","console","log","useTmdbData","option","useParams","URL","useTmdbFetch","movie","releaseYear","userScore","overview","genres","MOVIE_IMG_URL","poster_path","Loader","className","css","src","movieImg","alt","title","id","width","original_name","slice","map","genre","name","onClick","location","useLocation","newPath","path","pathname","includes","getBackPath","to","Suspense","fallback","MovieCard","release_date","vote_average"],"sourceRoot":""}