{"version":3,"file":"static/js/459.b3ce3210.chunk.js","mappings":"6LAAO,IAAMA,EAAqB,SAACC,EAASC,EAAeC,GACzD,IACMC,EAAU,8BAA0BD,GACpCE,EAAW,iBAAaJ,GACxBK,EAAQ,iBAAaL,EAAb,YACRM,EAAW,iBAAaN,EAAb,YAEjB,OAAQC,GACN,IAAK,WACH,MARiB,oBASnB,IAAK,SACH,OAAOE,EACT,IAAK,UACH,OAAOC,EACT,IAAK,OACH,OAAOC,EACT,IAAK,UACH,OAAOC,EACT,QACE,OAEL,EAEYC,EAAkB,CAC7BC,QAAS,mCACTC,SAAU,+BACVC,aAAc,kCACdC,0BAA2B,mFAC3BC,yBAA0B,4E,yJC5BfC,EAAqB,SAACC,GACjC,OAAKA,GAIEA,IADkBC,GAE1B,EAEYA,EAAsB,WACjC,IAAMC,EAAO,IAAIC,KACXC,EAAMF,EAAKG,UACXC,EAAQJ,EAAKK,WAAa,EAChC,MAAM,GAAN,OAAUH,EAAV,YAAiBE,EAClB,ECsDD,EA9D4B,SAACE,GAC3B,OAAwBC,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAwCJ,EAAAA,EAAAA,UAAS,GAAjD,eAAOK,EAAP,KAAqBC,EAArB,KACA,GAAkCN,EAAAA,EAAAA,WAAS,GAA3C,eAAOO,EAAP,KAAkBC,EAAlB,KACQvB,EAAsBD,EAAAA,EAAAA,QAAbE,EAAaF,EAAAA,EAAAA,SAsD9B,OApDAyB,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,iGACXX,GAAU,yBAAHA,EADI,uBAEdG,IACAM,GAAa,GAHC,sCAOdA,GAAa,IACMG,aAAaC,QAAQb,GAR1B,sBAWwBc,KAAKC,MAAMH,aAAaC,QAAQb,IAA5DR,EAXI,EAWJA,UAAWwB,EAXP,EAWOA,aACGzB,EAAmBC,GAZ7B,wBAeVW,EAAQa,GACRX,EAAS,MACTI,GAAa,GAjBH,2BAoBVG,aAAaK,QApBH,0BAuBSC,EAAAA,EAAAA,GAAM,GAAD,OAAI/B,GAAJ,OAAea,GAAO,CAChDmB,OAAQ,CACNC,QAASlC,EACTmC,SAAU,QACVC,OAAO,KA3BG,WAuBRC,EAvBQ,OA+BqB,KAD7BP,EAAeO,EAASrB,MACbsB,cA/BH,wBAgCZrB,EAAQ,MACRE,GAAS,GAjCG,2BAoCRb,EAAYC,IAClBmB,aAAaa,QAAQzB,EAAKc,KAAKY,UAAU,CAAElC,UAAAA,EAAWwB,aAAAA,KACtDb,EAAQoB,EAASrB,MACjBG,EAAS,MACTE,EAAgBgB,EAASrB,KAAKsB,eAxChB,kDA0CdnB,EAAS,EAAD,IACRF,EAAQ,MACRwB,QAAQC,IAAR,mCAAwC5B,EAAxC,sBA5Cc,yBA8CdS,GAAa,GA9CC,6EAAH,qDAiDfE,GACD,GAAE,CAACX,EAAKd,EAASC,IACX,CAAEe,KAAAA,EAAME,MAAAA,EAAOI,UAAAA,EAAWF,aAAAA,EAClC,EC7DYuB,EAAc,SAACC,EAAQlD,GAClC,IAAQF,GAAYqD,EAAAA,EAAAA,MAAZrD,QACJsD,GAAMvD,EAAAA,EAAAA,GAAmBC,EAASoD,EAAQlD,GAC9C,EAAmCqD,EAAaD,EAAKpD,GAErD,MAAO,CAAEF,QAAAA,EAASsD,IAAAA,EAAK9B,KAFvB,EAAQA,KAEqBM,UAF7B,EAAcA,UAE0BJ,MAFxC,EAAyBA,MAG1B,EAED,G,sDCXA,OAAgB,SAAW,qCAAqC,WAAa,wC,kBC6C7E,EA3C2B,SAAC,GAOrB,IANL8B,EAMI,EANJA,YACAC,EAKI,EALJA,KACAC,EAII,EAJJA,UACAC,EAGI,EAHJA,OACAC,EAEI,EAFJA,WACAC,EACI,EADJA,cAEQnD,EAA2CH,EAAAA,EAAAA,aAA7BK,EAA6BL,EAAAA,EAAAA,yBAC7CuD,EAAY,UAAMpD,GAAN,OAAqB8C,GAUvC,OACE,gBACEO,UAAS,UAAKC,EAAAA,kBAAL,YAA8BR,GAAeQ,EAAAA,SAA7C,YACPH,GAAiBG,EAAAA,YAFrB,UAKGP,IACC,gBACEM,UAAWC,EAAAA,iBACXC,IAjBW,SAAAT,GACjB,OAAIA,EACKM,EAEAlD,CAEV,CAWYsD,CAAWV,GAChBW,IAAKV,EACLW,MAAM,WAGV,cAAGL,UAAWC,EAAAA,mBAAd,SAAuCP,GAAQE,IAC9CD,IAAa,cAAGK,UAAWC,EAAAA,kBAAd,SAAsCN,IACnDE,IAAc,cAAGG,UAAWC,EAAAA,kBAAd,SAAsCJ,IACpDC,IACC,cAAGE,UAAWC,EAAAA,kBAAd,SAAsCH,MAI7C,C,mEC3CD,OAAgB,gBAAkB,+B,oCCgClC,EA5Ba,WACX,OAAmCV,EAAAA,EAAAA,GAAY,QAAvC3B,EAAR,EAAQA,KAAMM,EAAd,EAAcA,UAAWJ,EAAzB,EAAyBA,MAEzB,OAAQA,GAqBN,wBAAI,yCApBHI,GAiBC,SAACuC,EAAA,EAAD,KAhBA,gBAAKN,UAAWC,EAAAA,qBAAhB,UACE,eAAID,UAAWC,EAAAA,gBAAf,SACGxC,EAAK8C,KAAKC,KAAI,SAAAD,GAAI,OACjB,SAACE,EAAA,EAAD,CACET,UAAWC,EAAAA,SAEXR,YAAac,EAAKG,aAClBhB,KAAMa,EAAKb,KACXC,UAAWY,EAAKZ,UAChB5B,UAAWA,EACXJ,MAAOA,GALF4C,EAAKI,QAHK,OAmB5B,C","sources":["api/api-config.js","api/fetchUtils.js","api/useTmdbFetch.js","api/useTmdbData.js","webpack://react-homework-template/./src/components/AdditionalInfoCard/AdditionalInfoCard.module.css?dbfb","components/AdditionalInfoCard/AdditionalInfoCard.jsx","webpack://react-homework-template/./src/pages/Cast/Cast.module.css?cfbb","pages/Cast/Cast.jsx"],"sourcesContent":["export const getTmdbApiEndpoint = (movieId, fetchCategory, userQuery) => {\n  const TRENDING_URL = '/trending/all/day';\n  const SEARCH_URL = `/search/movie?query=${userQuery}`;\n  const DETAILS_URL = `/movie/${movieId}`;\n  const CAST_URL = `/movie/${movieId}/credits`;\n  const REVIEWS_URL = `/movie/${movieId}/reviews`;\n\n  switch (fetchCategory) {\n    case 'trending':\n      return TRENDING_URL;\n    case 'search':\n      return SEARCH_URL;\n    case 'details':\n      return DETAILS_URL;\n    case 'cast':\n      return CAST_URL;\n    case 'reviews':\n      return REVIEWS_URL;\n    default:\n      return;\n  }\n};\n\nexport const TMDB_API_CONFIG = {\n  API_KEY: '5d8e08b77a668b368d7194faf94b14f5',\n  BASE_URL: 'https://api.themoviedb.org/3',\n  IMG_BASE_URL: 'https://image.tmdb.org/t/p/w500',\n  MOVIE_IMG_PLACEHOLDER_URL: 'https://placehold.jp/84848b/ffffff/200x300.jpg?text=Movie%20Poster%20Unavailable',\n  CAST_IMG_PLACEHOLDER_URL: 'https://placehold.jp/95959d/ffffff/80x120.png?text=NO%20IMAGE%20AVAILABLE',\n};","export const isTimeStampExpired = (timeStamp) => {\n  if (!timeStamp) {\n    return true;\n  }\n  const currentTimeStamp = getCurrentTimeStamp();\n  return timeStamp !== currentTimeStamp;\n}\n\nexport const getCurrentTimeStamp = () => {\n  const date = new Date();\n  const day = date.getDate();\n  const month = date.getMonth() + 1;\n  return `${day}-${month}`;\n}\n\nexport const urlEndPoint = (url) => {\n  const urlArr = url.split('/');\n  const endPoint = urlArr[urlArr.length - 1];\n  return endPoint;\n}","import axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport { TMDB_API_CONFIG } from 'api/api-config';\nimport { getCurrentTimeStamp, isTimeStampExpired } from 'api/fetchUtils';\n\nexport const useTmdbFetch = (url) => {\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n  const [totalResults, setTotalResults] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n  const { API_KEY, BASE_URL } = TMDB_API_CONFIG;\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!url || url === `/search/movie?query=`) {\n        setData();\n        setIsLoading(false);\n        return;\n      }\n      try {\n        setIsLoading(true);\n        const cachedData = localStorage.getItem(url);\n\n        if (cachedData) {\n          const { timeStamp, responseData } = JSON.parse(localStorage.getItem(url));\n          const isDataExpired = isTimeStampExpired(timeStamp);\n\n          if (!isDataExpired) {\n            setData(responseData);\n            setError(null);\n            setIsLoading(false);\n            return;\n          } else {\n            localStorage.clear();\n          }\n        }\n        const response = await axios(`${BASE_URL}${url}`, {\n          params: {\n            api_key: API_KEY,\n            language: 'en-US',\n            adult: false,\n          },\n        });\n        const responseData = response.data;\n        if (responseData.total_results === 0) {\n          setData(null);\n          setError(true);\n          return;\n        }\n        const timeStamp = getCurrentTimeStamp();\n        localStorage.setItem(url, JSON.stringify({ timeStamp, responseData }));\n        setData(response.data);\n        setError(null);\n        setTotalResults(response.data.total_results);\n      } catch (error) {\n        setError(error)\n        setData(null);\n        console.log(`Error fetching data from ${url}: , ${error}`);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, [url, API_KEY, BASE_URL]);\n  return { data, error, isLoading, totalResults };\n};\n\nexport default useTmdbFetch;","import { useParams } from 'react-router-dom';\nimport useTmdbFetch from 'api/useTmdbFetch';\nimport { getTmdbApiEndpoint } from 'api/api-config';\n\nexport const useTmdbData = (option, userQuery) => {\n  const { movieId } = useParams();\n  let URL = getTmdbApiEndpoint(movieId, option, userQuery);\n  const { data, isLoading, error } = useTmdbFetch(URL, userQuery);\n\n  return { movieId, URL, data, isLoading, error };\n};\n\nexport default useTmdbData;","// extracted by mini-css-extract-plugin\nexport default {\"castItem\":\"AdditionalInfoCard_castItem__QOaj4\",\"reviewItem\":\"AdditionalInfoCard_reviewItem__06fkW\"};","import css from './AdditionalInfoCard.module.css';\nimport { TMDB_API_CONFIG } from 'api/api-config';\n\nconst AdditionalInfoCard = ({\n  profilePath,\n  name,\n  character,\n  author,\n  reviewDate,\n  reviewContent,\n}) => {\n  const { IMG_BASE_URL, CAST_IMG_PLACEHOLDER_URL } = TMDB_API_CONFIG;\n  const CAST_IMG_URL = `${IMG_BASE_URL}${profilePath}`;\n\n  const castImgUrl = profilePath => {\n    if (profilePath) {\n      return CAST_IMG_URL;\n    } else {\n      return CAST_IMG_PLACEHOLDER_URL;\n    }\n  };\n\n  return (\n    <li\n      className={`${css.additionaInfoItem} ${profilePath && css.castItem} ${\n        reviewContent && css.reviewItem\n      }`}\n    >\n      {name && (\n        <img\n          className={css.additionaInfoImg}\n          src={castImgUrl(profilePath)}\n          alt={name}\n          width=\"200px\"\n        />\n      )}\n      <p className={css.additionaInfoTitle}>{name || author}</p>\n      {character && <p className={css.additionaInfoText}>{character}</p>}\n      {reviewDate && <p className={css.additionaInfoText}>{reviewDate}</p>}\n      {reviewContent && (\n        <p className={css.additionaInfoText}>{reviewContent}</p>\n      )}\n    </li>\n  );\n};\n\nexport default AdditionalInfoCard;\n","// extracted by mini-css-extract-plugin\nexport default {\"castDetailsList\":\"Cast_castDetailsList__ZOOHV\"};","import css from './Cast.module.css';\nimport useTmdbData from 'api/useTmdbData';\nimport AdditionalInfoCard from 'components/AdditionalInfoCard/AdditionalInfoCard';\nimport Loader from 'components/Loader/Loader';\n\nconst Cast = () => {\n  const { data, isLoading, error } = useTmdbData('cast');\n\n  return !error ? (\n    !isLoading ? (\n      <div className={css.castDetailsContainer}>\n        <ul className={css.castDetailsList}>\n          {data.cast.map(cast => (\n            <AdditionalInfoCard\n              className={css.castItem}\n              key={cast.cast_id}\n              profilePath={cast.profile_path}\n              name={cast.name}\n              character={cast.character}\n              isLoading={isLoading}\n              error={error}\n            />\n          ))}\n        </ul>\n      </div>\n    ) : (\n      <Loader />\n    )\n  ) : (\n    <h5>Sorry, no cast details at this time.</h5>\n  );\n};\n\nexport default Cast;\n"],"names":["getTmdbApiEndpoint","movieId","fetchCategory","userQuery","SEARCH_URL","DETAILS_URL","CAST_URL","REVIEWS_URL","TMDB_API_CONFIG","API_KEY","BASE_URL","IMG_BASE_URL","MOVIE_IMG_PLACEHOLDER_URL","CAST_IMG_PLACEHOLDER_URL","isTimeStampExpired","timeStamp","getCurrentTimeStamp","date","Date","day","getDate","month","getMonth","url","useState","data","setData","error","setError","totalResults","setTotalResults","isLoading","setIsLoading","useEffect","fetchData","localStorage","getItem","JSON","parse","responseData","clear","axios","params","api_key","language","adult","response","total_results","setItem","stringify","console","log","useTmdbData","option","useParams","URL","useTmdbFetch","profilePath","name","character","author","reviewDate","reviewContent","CAST_IMG_URL","className","css","src","castImgUrl","alt","width","Loader","cast","map","AdditionalInfoCard","profile_path","cast_id"],"sourceRoot":""}