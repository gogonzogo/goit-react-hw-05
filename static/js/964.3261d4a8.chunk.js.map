{"version":3,"file":"static/js/964.3261d4a8.chunk.js","mappings":"uKACA,OAAiB,E,mBCmBjB,EAjBe,WACb,OACE,gBAAKA,UAAWC,EAAAA,gBAAhB,UACE,SAAC,KAAD,CACEC,SAAS,EACTC,OAAO,KACPC,MAAM,KACNC,UAAU,0BACVC,aAAc,CAAC,EACfC,aAAa,0BACbC,WAAW,UACXC,MAAM,aAIb,C,uDCjBD,MAAmC,oCAAnC,EAAyF,mCAAzF,EAA+I,oCAA/I,EAA4M,0C,6BCmE5M,EAhEkB,SAAC,GAOZ,IANLC,EAMI,EANJA,MACAC,EAKI,EALJA,YACAC,EAII,EAJJA,UACAC,EAGI,EAHJA,SACAC,EAEI,EAFJA,OACAC,EACI,EADJA,UAEQC,EAA4CC,EAAAA,EAAAA,aAA9BC,EAA8BD,EAAAA,EAAAA,0BAC9CE,EAAa,UAAMH,GAAN,OAAqBN,EAAMU,aAU9C,OAAQL,GAyCN,SAACM,EAAA,EAAD,KAxCA,+BACE,gBAAIrB,UAAWC,EAAf,WACE,gBACED,UAAWC,EACXqB,IAbS,SAAAZ,GACf,OAAIA,EAAMU,YACDD,EAEAD,CAEV,CAOYK,CAASb,GACdc,IAAKd,EAAMe,MACX,aAAYf,EAAMgB,GAClBtB,MAAM,WAER,gBAAIJ,UAAWC,EAAf,UACGU,IACC,iCACE,eAAIX,UAAWC,EAAf,SACGS,EAAMe,OAASf,EAAMiB,iBAExB,eAAI3B,UAAWC,EAAf,SACGU,EAAYiB,MAAM,EAAG,QAI3BhB,IACC,gBAAIZ,UAAWC,EAAf,UAA2C,eAC5BW,KAGhBC,IACC,eAAIb,UAAWC,EAAf,SAA4CY,IAE7CC,IACC,gBAAId,UAAWC,EAAf,UAA2C,UACjC,IACPa,EAAOe,KAAI,SAAAC,GAAK,OACf,4BAAsBA,EAAMC,KAAK,MAAtBD,EAAMJ,GADF,cAW9B,C,uDCjED,MAA+B,mC,uCC8B/B,EA1BqB,SAAC,GAA2B,IAAzBM,EAAwB,EAAxBA,OAAQjB,EAAgB,EAAhBA,UACxBkB,GAAWC,EAAAA,EAAAA,MAWjB,GAAKF,EAGL,OAAQjB,GAON,SAACM,EAAA,EAAD,KANA,eAAIrB,UAAWC,EAAkBkC,QAbf,SAAAC,GAClB,GAA0B,QAAtBA,EAAEC,OAAOC,SAAb,CAGE,IAAMC,EAAUH,EAAEC,OAAOG,QAAQC,MACjCR,EAAS,WAAD,OAAYM,GACrB,CACF,EAMC,SACGP,EAAOU,QAAQb,KAAI,SAAAnB,GAAK,OACvB,SAACiC,EAAA,EAAD,CAAWjC,MAAOA,EAAsBK,UAAWA,GAArBL,EAAMgB,GADb,KAO9B,C,8EC7BM,IAAMkB,EAAqB,SAACL,EAASM,EAAeC,GACzD,IACMC,EAAU,8BAA0BD,GACpCE,EAAW,iBAAaT,GACxBU,EAAQ,iBAAaV,EAAb,YACRW,EAAW,iBAAaX,EAAb,YAEjB,OAAQM,GACN,IAAK,WACH,MARiB,oBASnB,IAAK,SACH,OAAOE,EACT,IAAK,UACH,OAAOC,EACT,IAAK,OACH,OAAOC,EACT,IAAK,UACH,OAAOC,EACT,QACE,OAEL,EAEYjC,EAAkB,CAC7BkC,QAAS,mCACTC,SAAU,+BACVpC,aAAc,kCACdE,0BAA2B,mFAC3BmC,yBAA0B,4E,iKC1BfC,EAAqB,SAACC,GACjC,OAAKA,GAIEA,IADkBC,GAE1B,EAEYA,EAAsB,WACjC,IAAMC,EAAO,IAAIC,KACXC,EAAMF,EAAKG,UACXC,EAAQJ,EAAKK,WAAa,EAChC,MAAM,GAAN,OAAUH,EAAV,YAAiBE,EAClB,ECoDD,EA9D4B,SAACE,GAC3B,OAAwBC,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAwCJ,EAAAA,EAAAA,UAAS,GAAjD,eAAOK,EAAP,KAAqBC,EAArB,KACA,GAAkCN,EAAAA,EAAAA,WAAS,GAA3C,eAAOjD,EAAP,KAAkBwD,EAAlB,KACQpB,EAAsBlC,EAAAA,EAAAA,QAAbmC,EAAanC,EAAAA,EAAAA,SAsD9B,OApDAuD,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,iGACXV,GAAU,yBAAHA,EADI,uBAEdG,IACAK,GAAa,GAHC,sCAOdA,GAAa,IACMG,aAAaC,QAAQZ,GAR1B,sBAWwBa,KAAKC,MAAMH,aAAaC,QAAQZ,IAA5DR,EAXI,EAWJA,UAAWuB,EAXP,EAWOA,aACGxB,EAAmBC,GAZ7B,wBAeVW,EAAQY,GACRV,EAAS,MACTG,GAAa,GAjBH,2BAoBVG,aAAaK,QApBH,0BAuBSC,EAAAA,EAAAA,GAAM,GAAD,OAAI5B,GAAJ,OAAeW,GAAO,CAChDkB,OAAQ,CACNC,QAAS/B,EACTgC,SAAU,QACVC,OAAO,KA3BG,WAuBRC,EAvBQ,OA+BqB,KAD7BP,EAAeO,EAASpB,MACbqB,cA/BH,wBAgCZpB,EAAQ,MACRE,GAAS,GAjCG,2BAoCRb,EAAYC,IAClBkB,aAAaa,QAAQxB,EAAKa,KAAKY,UAAU,CAAEjC,UAAAA,EAAWuB,aAAAA,KACtDZ,EAAQmB,EAASpB,MACjBG,EAAS,MACTE,EAAgBe,EAASpB,KAAKqB,eAxChB,kDA0CdlB,EAAS,EAAD,IACRF,EAAQ,MACRuB,QAAQC,IAAR,mCAAwC3B,EAAxC,sBA5Cc,yBA8CdQ,GAAa,GA9CC,6EAAH,qDAiDfE,GACD,GAAE,CAACV,EAAKZ,EAASC,IACX,CAAEa,KAAAA,EAAME,MAAAA,EAAOpD,UAAAA,EAAWsD,aAAAA,EAClC,EC7DYsB,EAAc,SAACC,EAAQ9C,GAClC,IAAQP,GAAYsD,EAAAA,EAAAA,MAAZtD,QACJuD,GAAMlD,EAAAA,EAAAA,GAAmBL,EAASqD,EAAQ9C,GAC9C,EAAmCiD,EAAaD,EAAKhD,GAErD,MAAO,CAAEP,QAAAA,EAASuD,IAAAA,EAAK7B,KAFvB,EAAQA,KAEqBlD,UAF7B,EAAcA,UAE0BoD,MAFxC,EAAyBA,MAG1B,EAED,G,kFCXA,EAAuC,qCCAvC,GAAgB,gBAAkB,oCAAoC,oBAAsB,yC,mBC+B5F,EA7BmB,SAAC,GAAgB,IAAf6B,EAAc,EAAdA,SACnB,GAAkChC,EAAAA,EAAAA,UAAS,IAA3C,eAAOiC,EAAP,KAAkBC,EAAlB,KAYA,OACE,gBAAKlG,UAAWC,EAAAA,gBAAhB,UACE,kBAAM+F,SAPW,SAAC5D,GACpBA,EAAE+D,iBACFH,EAASC,EACV,EAIiCjG,UAAWC,EAAAA,oBAAzC,WACE,kBACED,UAAWC,EAAAA,gBACX8B,KAAK,SACLqE,KAAK,OACL3D,MAAOwD,EACPI,SAlBa,SAACjE,GACpB,IAAMkE,EAAQlE,EAAEC,OAAOI,MACvByD,EAAaI,EACd,KAiBK,mBAAQtG,UAAWC,EAAAA,iBAAsBmG,KAAK,SAA9C,SAAuD,eAI9D,E,oBCCD,EAzBe,WACb,OAAkCpC,EAAAA,EAAAA,UAAS,IAA3C,eAAOiC,EAAP,KAAkBC,EAAlB,KACA,GAAmCP,EAAAA,EAAAA,GAAY,SAAUM,GAAjDhC,EAAR,EAAQA,KAAMlD,EAAd,EAAcA,UAAWoD,EAAzB,EAAyBA,MASzB,OACE,iBAAKnE,UAAWC,EAAhB,WACE,SAAC,EAAD,CAAY+F,SATK,SAAAC,GACdA,GAGLC,EAAaD,EACd,IAKK9B,GAKA,wBAAI,4BAJJ,iCACE,SAACoC,EAAA,EAAD,CAAcvE,OAAQiC,EAAMlD,UAAWA,IAAc,SAO9D,C","sources":["components/Loader/Loader.module.css","components/Loader/Loader.jsx","webpack://react-homework-template/./src/components/MovieCard/MovieCard.module.css?a4e5","components/MovieCard/MovieCard.jsx","webpack://react-homework-template/./src/components/MovieGallery/MovieGallery.module.css?cb9b","components/MovieGallery/MovieGallery.jsx","config/api-config.js","utils/fetchUtils.js","hooks/useTmdbFetch.js","hooks/useTmdbData.js","webpack://react-homework-template/./src/pages/Movies/Movies.module.css?82ee","webpack://react-homework-template/./src/components/SearchForm/SearchForm.module.css?d6f1","components/SearchForm/SearchForm.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","import css from './Loader.module.css';\nimport { MagnifyingGlass } from 'react-loader-spinner';\n\nconst Loader = () => {\n  return (\n    <div className={css.loaderContainer}>\n      <MagnifyingGlass\n        visible={true}\n        height=\"80\"\n        width=\"80\"\n        ariaLabel=\"MagnifyingGlass-loading\"\n        wrapperStyle={{}}\n        wrapperClass=\"MagnifyingGlass-wrapper\"\n        glassColor=\"#c0efff\"\n        color=\"#e15b64\"\n      />\n    </div>\n  );\n}\n\nexport default Loader;","// extracted by mini-css-extract-plugin\nexport default {\"movieGalleryItem\":\"MovieCard_movieGalleryItem__dnDEx\",\"movieGalleryImg\":\"MovieCard_movieGalleryImg__9rhm1\",\"movieItemDetails\":\"MovieCard_movieItemDetails__QiHqU\",\"movieGalleryDetailItem\":\"MovieCard_movieGalleryDetailItem__w2MbF\"};","import css from './MovieCard.module.css';\nimport { TMDB_API_CONFIG } from 'config/api-config';\nimport Loader from 'components/Loader/Loader';\n\nconst MovieCard = ({\n  movie,\n  releaseYear,\n  userScore,\n  overview,\n  genres,\n  isLoading,\n}) => {\n  const { IMG_BASE_URL, MOVIE_IMG_PLACEHOLDER_URL } = TMDB_API_CONFIG;\n  const MOVIE_IMG_URL = `${IMG_BASE_URL}${movie.poster_path}`;\n\n  const movieImg = movie => {\n    if (movie.poster_path) {\n      return MOVIE_IMG_URL;\n    } else {\n      return MOVIE_IMG_PLACEHOLDER_URL;\n    }\n  };\n\n  return !isLoading ? (\n    <>\n      <li className={css.movieGalleryItem}>\n        <img\n          className={css.movieGalleryImg}\n          src={movieImg(movie)}\n          alt={movie.title}\n          data-value={movie.id}\n          width=\"200px\"\n        />\n        <ul className={css.movieItemDetails}>\n          {releaseYear && (\n            <>\n              <li className={css.movieGalleryDetailItem}>\n                {movie.title || movie.original_name}\n              </li>\n              <li className={css.movieGalleryDetailItem}>\n                {releaseYear.slice(0, 4)}\n              </li>\n            </>\n          )}\n          {userScore && (\n            <li className={css.movieGalleryDetailItem}>\n              User Score: {userScore}\n            </li>\n          )}\n          {overview && (\n            <li className={css.movieGalleryDetailItem}>{overview}</li>\n          )}\n          {genres && (\n            <li className={css.movieGalleryDetailItem}>\n              Genres:{' '}\n              {genres.map(genre => (\n                <span key={genre.id}>{genre.name} </span>\n              ))}\n            </li>\n          )}\n        </ul>\n      </li>\n    </>\n  ) : (\n    <Loader />\n  );\n};\n\nexport default MovieCard;\n","// extracted by mini-css-extract-plugin\nexport default {\"movieGallery\":\"MovieGallery_movieGallery__M2pL-\"};","import css from './MovieGallery.module.css';\nimport { useNavigate } from 'react-router-dom';\nimport MovieCard from '../MovieCard/MovieCard';\nimport Loader from 'components/Loader/Loader';\n\nconst MovieGallery = ({ movies, isLoading }) => {\n  const navigate = useNavigate();\n\n  const handleClick = e => {\n    if (e.target.nodeName !== 'IMG') {\n      return;\n    } else {\n      const movieId = e.target.dataset.value;\n      navigate(`/movies/${movieId}`);\n    }\n  };\n\n  if (!movies) {\n    return;\n  }\n  return !isLoading ? (\n    <ul className={css.movieGallery} onClick={handleClick}>\n      {movies.results.map(movie => (\n        <MovieCard movie={movie} key={movie.id} isLoading={isLoading} />\n      ))}\n    </ul>\n  ) : (\n    <Loader />\n  );\n};\n\nexport default MovieGallery;\n","export const getTmdbApiEndpoint = (movieId, fetchCategory, userQuery) => {\n  const TRENDING_URL = '/trending/all/day';\n  const SEARCH_URL = `/search/movie?query=${userQuery}`;\n  const DETAILS_URL = `/movie/${movieId}`;\n  const CAST_URL = `/movie/${movieId}/credits`;\n  const REVIEWS_URL = `/movie/${movieId}/reviews`;\n\n  switch (fetchCategory) {\n    case 'trending':\n      return TRENDING_URL;\n    case 'search':\n      return SEARCH_URL;\n    case 'details':\n      return DETAILS_URL;\n    case 'cast':\n      return CAST_URL;\n    case 'reviews':\n      return REVIEWS_URL;\n    default:\n      return;\n  }\n};\n\nexport const TMDB_API_CONFIG = {\n  API_KEY: '5d8e08b77a668b368d7194faf94b14f5',\n  BASE_URL: 'https://api.themoviedb.org/3',\n  IMG_BASE_URL: 'https://image.tmdb.org/t/p/w500',\n  MOVIE_IMG_PLACEHOLDER_URL: 'https://placehold.jp/84848b/ffffff/200x300.jpg?text=Movie%20Poster%20Unavailable',\n  CAST_IMG_PLACEHOLDER_URL: 'https://placehold.jp/95959d/ffffff/80x120.png?text=NO%20IMAGE%20AVAILABLE',\n};","\n\nexport const isTimeStampExpired = (timeStamp) => {\n  if (!timeStamp) {\n    return true;\n  }\n  const currentTimeStamp = getCurrentTimeStamp();\n  return timeStamp !== currentTimeStamp;\n}\n\nexport const getCurrentTimeStamp = () => {\n  const date = new Date();\n  const day = date.getDate();\n  const month = date.getMonth() + 1;\n  return `${day}-${month}`;\n}\n\nexport const urlEndPoint = (url) => {\n  const urlArr = url.split('/');\n  const endPoint = urlArr[urlArr.length - 1];\n  return endPoint;\n}","import axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport { TMDB_API_CONFIG } from 'config/api-config';\nimport { getCurrentTimeStamp, isTimeStampExpired } from 'utils/fetchUtils';\n\nexport const useTmdbFetch = (url) => {\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n  const [totalResults, setTotalResults] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n  const { API_KEY, BASE_URL } = TMDB_API_CONFIG;\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!url || url === `/search/movie?query=`) {\n        setData();\n        setIsLoading(false);\n        return;\n      }\n      try {\n        setIsLoading(true);\n        const cachedData = localStorage.getItem(url);\n\n        if (cachedData) {\n          const { timeStamp, responseData } = JSON.parse(localStorage.getItem(url));\n          const isDataExpired = isTimeStampExpired(timeStamp);\n\n          if (!isDataExpired) {\n            setData(responseData);\n            setError(null);\n            setIsLoading(false);\n            return;\n          } else {\n            localStorage.clear();\n          }\n        }\n        const response = await axios(`${BASE_URL}${url}`, {\n          params: {\n            api_key: API_KEY,\n            language: 'en-US',\n            adult: false,\n          },\n        });\n        const responseData = response.data;\n        if (responseData.total_results === 0) {\n          setData(null);\n          setError(true);\n          return;\n        }\n        const timeStamp = getCurrentTimeStamp();\n        localStorage.setItem(url, JSON.stringify({ timeStamp, responseData }));\n        setData(response.data);\n        setError(null);\n        setTotalResults(response.data.total_results);\n      } catch (error) {\n        setError(error)\n        setData(null);\n        console.log(`Error fetching data from ${url}: , ${error}`);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, [url, API_KEY, BASE_URL]);\n  return { data, error, isLoading, totalResults };\n};\n\nexport default useTmdbFetch;","import { useParams } from 'react-router-dom';\nimport useTmdbFetch from 'hooks/useTmdbFetch';\nimport { getTmdbApiEndpoint } from 'config/api-config';\n\nexport const useTmdbData = (option, userQuery) => {\n  const { movieId } = useParams();\n  let URL = getTmdbApiEndpoint(movieId, option, userQuery);\n  const { data, isLoading, error } = useTmdbFetch(URL, userQuery);\n\n  return { movieId, URL, data, isLoading, error };\n};\n\nexport default useTmdbData;","// extracted by mini-css-extract-plugin\nexport default {\"movieSearchContainer\":\"Movies_movieSearchContainer__Nvnzc\"};","// extracted by mini-css-extract-plugin\nexport default {\"searchFormInput\":\"SearchForm_searchFormInput__3mF-P\",\"searchFormContainer\":\"SearchForm_searchFormContainer__eByRx\"};","import css from './SearchForm.module.css';\nimport { useState } from 'react';\n\nconst SearchForm = ({onSubmit}) => {\n  const [userInput, setUserInput] = useState('');\n\n  const handleChange = (e) => {\n    const query = e.target.value;\n    setUserInput(query);\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    onSubmit(userInput);\n  }\n\n  return (\n    <div className={css.searchContainer}>\n      <form onSubmit={handleSubmit} className={css.searchFormContainer}>\n        <input\n          className={css.searchFormInput}\n          name=\"search\"\n          type=\"text\"\n          value={userInput}\n          onChange={handleChange}\n        ></input>\n        <button className={css.searchFormButton} type=\"submit\">Search</button>\n      </form>\n    </div>\n  );\n}\n\nexport default SearchForm;","import css from './Movies.module.css';\nimport SearchForm from '../../components/SearchForm/SearchForm';\nimport { useState } from 'react';\nimport { useTmdbData } from 'hooks/useTmdbData';\nimport MovieGallery from 'components/MovieGallery/MovieGallery';\n\nconst Movies = () => {\n  const [userInput, setUserInput] = useState('');\n  const { data, isLoading, error } = useTmdbData('search', userInput);\n\n  const handleSubmit = userInput => {\n    if (!userInput) {\n      return;\n    }\n    setUserInput(userInput);\n  };\n\n  return (\n    <div className={css.movieSearchContainer}>\n      <SearchForm onSubmit={handleSubmit} />\n      {!error ? (\n        <>\n          <MovieGallery movies={data} isLoading={isLoading} />{' '}\n        </>\n      ) : (\n        <h1>No movies match search</h1>\n      )}\n    </div>\n  );\n};\n\nexport default Movies;\n"],"names":["className","css","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","glassColor","color","movie","releaseYear","userScore","overview","genres","isLoading","IMG_BASE_URL","TMDB_API_CONFIG","MOVIE_IMG_PLACEHOLDER_URL","MOVIE_IMG_URL","poster_path","Loader","src","movieImg","alt","title","id","original_name","slice","map","genre","name","movies","navigate","useNavigate","onClick","e","target","nodeName","movieId","dataset","value","results","MovieCard","getTmdbApiEndpoint","fetchCategory","userQuery","SEARCH_URL","DETAILS_URL","CAST_URL","REVIEWS_URL","API_KEY","BASE_URL","CAST_IMG_PLACEHOLDER_URL","isTimeStampExpired","timeStamp","getCurrentTimeStamp","date","Date","day","getDate","month","getMonth","url","useState","data","setData","error","setError","totalResults","setTotalResults","setIsLoading","useEffect","fetchData","localStorage","getItem","JSON","parse","responseData","clear","axios","params","api_key","language","adult","response","total_results","setItem","stringify","console","log","useTmdbData","option","useParams","URL","useTmdbFetch","onSubmit","userInput","setUserInput","preventDefault","type","onChange","query","MovieGallery"],"sourceRoot":""}