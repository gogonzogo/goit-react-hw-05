{"version":3,"file":"static/js/135.a32a84ae.chunk.js","mappings":"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","sources":["components/Loader/Loader.module.css","components/Loader/Loader.jsx","webpack://react-homework-template/./src/components/MovieCard/MovieCard.module.css?a4e5","components/MovieCard/MovieCard.jsx","config/api-config.js","utils/fetchUtils.js","hooks/useTmdbFetch.js","hooks/useTmdbData.js","layouts/CastAndReviewsLayout/CastAndReviewsLayout.module.css","layouts/CastAndReviewsLayout/CastAndReviewsLayout.jsx","pages/MovieDetails/MovieDetails.module.css","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","import css from './Loader.module.css';\nimport { MagnifyingGlass } from 'react-loader-spinner';\n\nconst Loader = () => {\n  return (\n    <div className={css.loaderContainer}>\n      <MagnifyingGlass\n        visible={true}\n        height=\"80\"\n        width=\"80\"\n        ariaLabel=\"MagnifyingGlass-loading\"\n        wrapperStyle={{}}\n        wrapperClass=\"MagnifyingGlass-wrapper\"\n        glassColor=\"#c0efff\"\n        color=\"#e15b64\"\n      />\n    </div>\n  );\n}\n\nexport default Loader;","// extracted by mini-css-extract-plugin\nexport default {\"movieGalleryItem\":\"MovieCard_movieGalleryItem__dnDEx\"};","import css from './MovieCard.module.css';\nimport { TMDB_API_CONFIG } from 'config/api-config';\nimport Loader from 'components/Loader/Loader';  \n\nconst MovieCard = ({ movie, releaseYear, userScore, overview, genres, isLoading }) => {\n  const { IMG_BASE_URL, IMG_PLACEHOLDER_URL } = TMDB_API_CONFIG;\n  const MOVIE_IMG_URL = `${IMG_BASE_URL}${movie.poster_path}`\n \n  const movieImg = (movie) => {\n    if (movie.poster_path) {\n      return MOVIE_IMG_URL\n    } else {\n      return IMG_PLACEHOLDER_URL\n    }\n  };\n  \n  return !isLoading ? (\n    <>\n      <li className={css.movieGalleryItem}>\n        <img\n          className={css.movieGalleryImg}\n          src={movieImg(movie)}\n\n          alt={movie.title}\n          data-value={movie.id}\n          width=\"200px\"\n        />\n        <p className={css.movieGalleryTitle}>\n          {movie.title || movie.original_name}\n        </p>\n        {releaseYear && (\n          <p className={css.movieGalleryText}>{releaseYear.slice(0, 4)}</p>\n        )}\n        {userScore && (\n          <p className={css.movieGalleryText}>User Score: {userScore}</p>\n        )}\n        {overview && <p className={css.movieGalleryText}>{overview}</p>}\n        {genres && (\n          <p className={css.movieGalleryText}>\n            Genres:{' '}\n            {genres.map(genre => (\n              <span key={genre.id}>{genre.name} </span>\n            ))}\n          </p>\n        )}\n      </li>\n    </>\n  ) : (\n      <Loader/>\n  )\n};\n\nexport default MovieCard;","export const getTmdbApiEndpoint = (movieId, fetchCategory, userQuery) => {\n  const TRENDING_URL = '/trending/all/day';\n  const SEARCH_URL = `/search/movie?query=${userQuery}`;\n  const DETAILS_URL = `/movie/${movieId}`;\n  const CAST_URL = `/movie/${movieId}/credits`;\n  const REVIEWS_URL = `/movie/${movieId}/reviews`;\n\n  switch (fetchCategory) {\n    case 'trending':\n      return TRENDING_URL;\n    case 'search':\n      return SEARCH_URL;\n    case 'details':\n      return DETAILS_URL;\n    case 'cast':\n      return CAST_URL;\n    case 'reviews':\n      return REVIEWS_URL;\n    default:\n      return;\n  }\n};\n\nexport const TMDB_API_CONFIG = {\n  API_KEY: '5d8e08b77a668b368d7194faf94b14f5',\n  BASE_URL: 'https://api.themoviedb.org/3',\n  IMG_BASE_URL: 'https://image.tmdb.org/t/p/w500',\n  IMG_PLACEHOLDER_URL: 'https://placehold.jp/84848b/ffffff/200x300.jpg?text=Movie%20Poster%20Unavailable',\n};","\n\nexport const isTimeStampExpired = (timeStamp) => {\n  if (!timeStamp) {\n    return true;\n  }\n  const currentTimeStamp = getCurrentTimeStamp();\n  return timeStamp !== currentTimeStamp;\n}\n\nexport const getCurrentTimeStamp = () => {\n  const date = new Date();\n  const day = date.getDate();\n  const month = date.getMonth() + 1;\n  return `${day}-${month}`;\n}\n\nexport const urlEndPoint = (url) => {\n  const urlArr = url.split('/');\n  const endPoint = urlArr[urlArr.length - 1];\n  return endPoint;\n}","import axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport { TMDB_API_CONFIG } from 'config/api-config';\nimport {\n  getCurrentTimeStamp, isTimeStampExpired } from 'utils/fetchUtils';\n\nexport const useTmdbFetch = (url) => {\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n  const [totalResults, setTotalResults] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n  const { API_KEY, BASE_URL } = TMDB_API_CONFIG;\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!url || url === `/search/movie?query=`) {\n        setData();\n        setIsLoading(false);\n        return;\n      }\n      try {\n        setIsLoading(true);\n        const cachedData = localStorage.getItem(url);\n\n        if (cachedData) {\n          const { timeStamp, responseData } = JSON.parse(localStorage.getItem(url));\n          const isDataExpired = isTimeStampExpired(timeStamp);\n\n          if (!isDataExpired) {\n            setData(responseData);\n            setError(null);\n            setIsLoading(false);\n            return;\n          } else {\n            localStorage.clear();\n          }\n        }\n        const response = await axios(`${BASE_URL}${url}`, {\n          params: {\n            api_key: API_KEY,\n            language: 'en-US',\n            adult: false,\n          },\n        });\n        const responseData = response.data;\n        console.log(responseData)\n        if (responseData.total_results === 0) {\n          setData(null);\n          setError(true);\n          return;\n        }\n        const timeStamp = getCurrentTimeStamp();\n        localStorage.setItem(url, JSON.stringify({ timeStamp, responseData }));\n        setData(response.data);\n        setError(null);\n        setTotalResults(response.data.total_results);\n      } catch (error) {\n        setError(error)\n        setData(null);\n        console.log(`Error fetching data from ${url}: , ${error}`);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, [url, API_KEY, BASE_URL]);\n  return { data, error, isLoading, totalResults };\n};\n\nexport default useTmdbFetch;","import { useParams } from 'react-router-dom';\nimport useTmdbFetch from 'hooks/useTmdbFetch';\nimport { getTmdbApiEndpoint } from 'config/api-config';\n\nexport const useTmdbData = (option, userQuery) => {\n  const { movieId } = useParams();\n  let URL = getTmdbApiEndpoint(movieId, option, userQuery);\n  const { data, isLoading, error } = useTmdbFetch(URL, userQuery);\n\n  return { movieId, URL, data, isLoading, error };\n};\n\nexport default useTmdbData;","// extracted by mini-css-extract-plugin\nexport default {};","import css from './CastAndReviewsLayout.module.css';\nimport { NavLink, Outlet, useParams } from 'react-router-dom';\nimport { Suspense } from 'react';\nimport Loader from 'components/Loader/Loader';\n\nconst CastAndReviewsLayout = () => {\n  const { movieId } = useParams();\n\n  return (\n    <>\n      <div className={css.additionalMovieInfo}>\n        <p className={css.additionalMovieInfoTitle}>Additional information</p>\n        <ul className={css.additionalMovieInfoList}>\n          <li className={css.additionalMovieInfoListItem}>\n            <NavLink to={`/movies/${movieId}/cast`} className={css.castLink}>\n              Cast\n            </NavLink>\n          </li>\n          <li className={css.additionalMovieInfoListItem}>\n            <NavLink\n              to={`/movies/${movieId}/reviews`}\n              className={css.reviewLink}\n            >\n              Reviews\n            </NavLink>\n          </li>\n        </ul>\n      </div>\n      <div>\n        <Suspense fallback={<Loader />}>\n          <Outlet />\n        </Suspense>\n      </div>\n    </>\n  );\n};\n\nexport default CastAndReviewsLayout;\n","// extracted by mini-css-extract-plugin\nexport default {};","import css from './MovieDetails.module.css';\nimport useTmdbData from 'hooks/useTmdbData';\nimport MovieCard from 'components/MovieCard/MovieCard';\nimport CastAndReviewsLayout from 'layouts/CastAndReviewsLayout/CastAndReviewsLayout';\nimport { useNavigate } from 'react-router-dom';\nimport Loader from 'components/Loader/Loader';\n\nconst MovieDetails = () => {\n  const { data, isLoading, error } = useTmdbData('details');\n  const movie = data;\n  const navigate = useNavigate();\n\n  console.log(data);\n\n  const handleBackClick = () => {\n    navigate(-1);\n  };\n\n  return !error ? (\n    !isLoading ? (\n      <div className={css.movieDetailsContainer}>\n        <button onClick={handleBackClick}>Go Back</button>\n        <ul className={css.movieDetails}>\n          <MovieCard\n            movie={movie}\n            releaseYear={movie.release_date}\n            userScore={movie.vote_average}\n            overview={movie.overview}\n            genres={movie.genres}\n          />\n        </ul>\n        <CastAndReviewsLayout />\n      </div>\n    ) : (\n      <Loader />\n    )\n  ) : (\n    <h1>Sorry, no movie details for the selected movie.</h1>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["className","css","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","glassColor","color","movie","releaseYear","userScore","overview","genres","isLoading","IMG_BASE_URL","TMDB_API_CONFIG","IMG_PLACEHOLDER_URL","MOVIE_IMG_URL","poster_path","Loader","src","movieImg","alt","title","id","original_name","slice","map","genre","name","getTmdbApiEndpoint","movieId","fetchCategory","userQuery","SEARCH_URL","DETAILS_URL","CAST_URL","REVIEWS_URL","API_KEY","BASE_URL","isTimeStampExpired","timeStamp","getCurrentTimeStamp","date","Date","day","getDate","month","getMonth","url","useState","data","setData","error","setError","totalResults","setTotalResults","setIsLoading","useEffect","fetchData","localStorage","getItem","JSON","parse","responseData","clear","axios","params","api_key","language","adult","response","console","log","total_results","setItem","stringify","useTmdbData","option","useParams","URL","useTmdbFetch","to","Suspense","fallback","navigate","useNavigate","onClick","MovieCard","release_date","vote_average","CastAndReviewsLayout"],"sourceRoot":""}